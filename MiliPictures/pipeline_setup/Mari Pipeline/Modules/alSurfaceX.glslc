#version 150

float n_min(float r)
{ 
   return (1-r)/(1+r);
}

float n_max(float r)
{
	return (1+sqrt(r))/(1-sqrt(r)); 
}


float get_n(float r,float g)
{
   return n_min(r)*g + (1-g)*n_max(r);
}

float get_k2(float r, float n)
{
   float nr = (n+1)*(n+1)*r-(n-1)*(n-1);
   return nr/(1-r ); 
}


float olefresnel(float r, float g, float c)
{ 
   // clamp parameters
   float _r = clamp(r, 0.0f, 0.99f); 
   // compute n and k
   float n = get_n(_r,g);
   float k2 = get_k2(_r,n);
   float rs_num = n*n + k2 - 2*n*c + c*c; 
   float rs_den = n*n + k2 + 2*n*c + c*c;
   float rs = rs_num/rs_den;
   float rp_num = (n*n + k2)*c*c - 2*n*c + 1; 
   float rp_den = (n*n + k2)*c*c + 2*n*c + 1;
   float rp = rp_num / rp_den ;
   return 0.5*( rs+rp ); 
}


//! include | alSurfaceX.glslh
vec3 FresnelConductor(vec3 Refelctivity, vec3 EdgeTint,float cos_theta)
{
	vec3 result = vec3(
	  olefresnel(Refelctivity.r, EdgeTint.r, cos_theta),
	  olefresnel(Refelctivity.g, EdgeTint.g, cos_theta),
	  olefresnel(Refelctivity.b, EdgeTint.b, cos_theta)
   );
	return result;
}
