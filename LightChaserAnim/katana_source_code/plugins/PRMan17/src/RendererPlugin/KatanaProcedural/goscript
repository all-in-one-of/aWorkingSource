#!/embedded/python

from time import time,ctime
print 'Today is',ctime(time())

import sys
sys.path.insert( 0, '../../../PYTHON_LIBS' )

import GeoAPI
#import collections

def recursiveOutput(fi, indent):
    localfi = fi.lockedCopy()
    while not localfi.isNull():
        if len(indent) > 10:
            return
        print indent, 'name:', localfi.name(), 'type:', localfi.type()
        try:
            xform = localfi.localAttribute('xform')
            xformchildren = xform.children()
            for (key,value) in xformchildren.items():
                print indent, ' ', key, ':', value.getData()
        except:
            pass
        recursiveOutput(localfi.down(), indent+' ')
        if (localfi.isLocked()):
            localfi = localfi.unlockedCopy()
        localfi.next()

proceduralArgs = GeoAPI.GroupAttr({'gtoFile':GeoAPI.Attr('StringAttr',
    ['/net/homedirs/shingot/src/katana/TEST_IMAGES/dolphin.gto'])})
    #['/shots/pipe/dev_katana/birps/asm_hall_test/sprib/v1/scene.sprib'])})
    #['/net/homedirs/hall/svn/katana/TEST_IMAGES/pex_in04_scene.sprib'])})
    #['/net/homedirs/hall/svn/katana/TEST_IMAGES/pex_sa21_scene.sprib'])})
    #['/net/homedirs/hall/svn/katana/TEST_IMAGES/pex_bs65_scene.sprib'])})

attrDict = {'name' : GeoAPI.Attr('StringAttr', ['root']),
            'type' : GeoAPI.Attr('StringAttr', ['procedural']),
            'path' : GeoAPI.Attr('StringAttr', ['/net/homedirs/shingot/src/katana/PROCEDURALS/GTO_In.so']),
            'proceduralArgs' : proceduralArgs
           }
iter0 = GeoAPI.Filters.GenericGeo(attrDict=attrDict, nodeName='GenericGeo')
iter1 = GeoAPI.Filters.ProceduralResolve(iter0, 'ResolveProcedural',(0,0,0))

#file.write('%s = GeoAPI.Filters.ProceduralResolve(%s, nodeName="%s", time = (%f, %f, %f))\n' % (outName, inName, nodeName,
 #                                                                                                       t1,t2,t3))



iterator = iter1
# iterator = GeoAPI.Filters.PruneFilter(iter1, compiledCEL=collections.ParsedCEL('//*proxy\n'), nodeName='prune')
# recursiveOutput(iterator, '')
#print 'Done Expanding'
