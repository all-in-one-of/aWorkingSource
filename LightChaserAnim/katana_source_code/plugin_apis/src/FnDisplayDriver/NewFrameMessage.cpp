// Copyright (c) 2012 The Foundry Visionmongers Ltd. All Rights Reserved.

#include "FnDisplayDriver/NewFrameMessage.h"

#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

Foundry::Katana::NewFrameMessage::NewFrameMessage(float frameTime,
                                                  uint32_t height,
                                                  uint32_t width,
                                                  int xorigin,
                                                  int yorigin)
: _tag(boost::uuids::random_generator()()), _frameName()
{
  // Setup the protocol header
  _header.magicNumber = 0xAA;
  _header.versionNumber = 0x01;
  _header.msgType = 0x00;
  _header.zeroPadding = 0x00;

  // UUID is generated by boost, just copy it into our frameUUID member...
  memcpy(&(_newFrame.frameUUID), _tag.data, 16);

  // Setup the body of the message...
  _newFrame.frameTime = frameTime;
  _newFrame.height = height;
  _newFrame.width = width;
  _newFrame.xorigin = xorigin;
  _newFrame.yorigin = yorigin;
  _newFrame.nameLength = 0;
}

Foundry::Katana::NewFrameMessage::~NewFrameMessage()
{
  // No dynamically allocated memory to worry about...
#ifdef SOCKET_DEBUG
  std::cerr << "NewFrameMessage "; _printFrameID(std::cerr);
  std::cerr << " destroyed" << std::endl;
#endif
}

int Foundry::Katana::NewFrameMessage::send(void *socket) const
{
  assert(socket);

  // Header
  Message::send_msg_part( &_header, sizeof( _header ), socket, false );

  // Body
  Message::send_msg_part( &_newFrame, sizeof( _newFrame ), socket, false );

  // Frame Name...
  Message::send_msg_part( _frameName.c_str(), _newFrame.nameLength, socket, true );

  return 0;
}


Foundry::Katana::Message* Foundry::Katana::NewFrameMessage::copy() const
{
  Foundry::Katana::NewFrameMessage* nfCopy =
      new Foundry::Katana::NewFrameMessage();

  // Copy everything from this into nfCopy and return.
  memcpy(&(nfCopy->_header), &_header, sizeof(_header) );
  memcpy(&(nfCopy->_newFrame), &_newFrame, sizeof(_newFrame) );


  for(int x = 0; x < 16; ++x)
  {
    assert(nfCopy->_newFrame.frameUUID[x] == _newFrame.frameUUID[x]);
  }

  nfCopy->_frameName = _frameName;

  return nfCopy;
}

void Foundry::Katana::encodeLegacyName(const std::string &legacyFrameName,
                                       int legacyFrameNumber,
                                       std::string &buffer)
{
  // Encode in the JSON format using the following object format
  // framenameEncoding {
  //    id : <id number>,
  //  name : <frame name>
  // }
  boost::property_tree::ptree ptree;
  ptree.put("framenameEncoding.id", legacyFrameNumber);
  ptree.put("framenameEncoding.name", legacyFrameName);

  std::stringstream ss;

  boost::property_tree::write_json(ss, ptree);
  buffer = ss.str();
  return;
}

#ifdef SOCKET_DEBUG
std::ostream& Foundry::Katana::operator<<(std::ostream &out,
                                          const Foundry::Katana::NewFrameMessage &frame)
{
  out << "********************************************************************************" << "\n";
  out << "Frame" << "\n";

  out << "Header - Magic Number   : " << std::hex << static_cast<int>(frame._header.magicNumber) << "\n";
  out << "Header - Version Number : " << std::hex << static_cast<int>(frame._header.versionNumber) << "\n";
  out << "Header - Message Type   : " << std::hex << static_cast<int>(frame._header.msgType) << "\n";
  out << "Header - Zero Padding   : " << std::hex << static_cast<int>(frame._header.zeroPadding) << "\n\n";

  out << "Body   - Frame UUID     : ";
  frame._printFrameID(out);
  out << "\n";

  out << std::dec;
  out << "Body   - Frame Time     : " << frame._newFrame.frameTime << "\n";
  out << "Body   - Height         : " << frame._newFrame.height << "\n";
  out << "Body   - Width          : " << frame._newFrame.width << "\n";
  out << "Body   - X Origin       : " << frame._newFrame.xorigin << "\n";
  out << "Body   - Y Origin       : " << frame._newFrame.yorigin << "\n";
  out << "Body   - Name Length    : " << frame._newFrame.nameLength << "\n\n";

  out << "Tail   - Frame Name     : " << frame._frameName << "\n";
  out << std::endl;

  return out;
}

void Foundry::Katana::NewFrame::_printFrameID(std::ostream &out) const
{
  for(int x = 0; x < 16; x++)
  {
    out << std::hex << static_cast<int>(_newFrame.frameUUID[x]);
    if(((x + 1) % 4) == 0 &&  (x + 1) < 16)
      out << " - ";
  }

  out << std::dec;
}
#endif
