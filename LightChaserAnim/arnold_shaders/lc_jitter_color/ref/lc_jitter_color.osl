#include "common/alshaders.h"

point compute_rand(float data,
					float intensity,
					float h_min,
					float h_max,
					float s_min,
					float s_max,
					float v_min,
					float v_max,
					int seed,
					int seed_global)
{
	point resout = point(0,0,0);
	float h_int = 0;
	float h_value = 0;
	float s_int = 0;
	float s_value = 0;
	float v_int = 0;
	float v_value = 0;

	h_int = noise("cell",(data+seed+seed_global+51731.132151));
	h_value = lerp(h_min,h_max,h_int);

	s_int = noise("cell",(data+seed+seed_global+2014));
	s_value = lerp(s_min,s_max,s_int);

	v_int = noise("cell",(data+seed+seed_global+3321));
	v_value = lerp(v_min,v_max,v_int);
	return resout = point(h_value,s_value,v_value)*intensity;
}

float data_Ramp(float positions[2],
				int lca_face_shell,
				float ramp_rand_int,
				float data,
				int seed,
				int seed_global)
{	
	float resout = 0.0;
	float int_rand = lerp(1,noise("cell",(lca_face_shell+seed+seed_global+8740)),ramp_rand_int);
	resout = clamp((data-positions[0])/(positions[1]-positions[0]),0,1)*int_rand;
	return resout;
}

point value_byRange(float intensity,
					float h_min,
					float h_max,
					float s_min,
					float s_max,
					float v_min,
					float v_max,
	)
{
	point resout = point(0,0,0); 
	resout[0] = lerp(h_min,h_max,intensity);
	resout[1] = lerp(s_min,s_max,intensity);
	resout[2] = lerp(v_min,v_max,intensity);
	return resout;
}

shader lc_jitter_color(
	color input = color(1,1,1),

	string face_shell = "lca_face_shell",            //int value
	string plant_area = "lca_shell_area",            //float value
	string plant_ao = "lca_shell_ao",                //float value
	//string plant_cv = "lca_plant_edge",            //float or rgb value
	string plant_py = "lca_shell_py",                //float value
	string plant_custom = "type your own float data",//float value
	float plant_custom_default = 0.0,

	float rand_intensity = 0.0,
	float rand_hue_min = 0,
	float rand_hue_max = 0,
	float rand_sat_min = 0,
	float rand_sat_max = 0,
	float rand_val_min = 0,
	float rand_val_max = 0,
	int rand_seed = 0,

	int py_enable = 1,
	float py_posi_a = 0.0,
	float py_posi_b = 1.0,
	float py_rand_int = 0,
	float py_hue_min = 0,
	float py_hue_max = 0,
	float py_sat_min = 0,
	float py_sat_max = 0,
	float py_val_min = 0,
	float py_val_max = 0,
	int py_seed = 0,

	int area_enable = 1,
	float area_posi_a = 0.0,
	float area_posi_b = 1.0,
	float area_rand_int = 0,
	float area_hue_min = 0,
	float area_hue_max = 0,
	float area_sat_min = 0,
	float area_sat_max = 0,
	float area_val_min = 0,
	float area_val_max = 0,
	int area_seed = 0,

	int ao_enable = 1,
	float ao_posi_a = 0.0,
	float ao_posi_b = 1.0,
	float ao_rand_int = 0,
	float ao_hue_min = 0,
	float ao_hue_max = 0,
	float ao_sat_min = 0,
	float ao_sat_max = 0,
	float ao_val_min = 0,
	float ao_val_max = 0,
	int ao_seed = 0,

	// int cv_enable = 1,
	// float cv_posi_a = 0.0,
	// float cv_posi_b = 1.0,
	// float cv_rand_int = 0,
	// float cv_hue_min = 0,
	// float cv_hue_max = 0,
	// float cv_sat_min = 0,
	// float cv_sat_max = 0,
	// float cv_val_min = 0,
	// float cv_val_max = 0,
	// int cv_seed = 0,

	int cus_enable = 1,
	float cus_posi_a = 0.0,
	float cus_posi_b = 1.0,
	float cus_rand_int = 0,
	float cus_hue_min = 0,
	float cus_hue_max = 0,
	float cus_sat_min = 0,
	float cus_sat_max = 0,
	float cus_val_min = 0,
	float cus_val_max = 0,
	int cus_seed = 0,

	string debugMode = "render",
	output color outColor = color(0, 0, 0))
{

 	int lca_face_shell;
	float plant_py_data;
	float plant_area_data;
	float plant_ao_data;
	float plant_cv_data;
	float plant_custom_data;
	color tmp = al_rgb2hsv(input);
	//Get attribute
	getattribute(face_shell,lca_face_shell);
	getattribute(plant_py,plant_py_data);
	getattribute(plant_area,plant_area_data);
	getattribute(plant_ao,plant_ao_data);
	//getattribute(plant_cv,plant_cv_data);
	int arg = getattribute(plant_custom,plant_custom_data);
	if (!arg)
		plant_custom_data = plant_custom_default;

	//rand via face shell attribute
	float rand_int = select(0.0,1.0,((lca_face_shell+rand_seed)%100 < rand_intensity*100));
	point rand_resout = compute_rand(lca_face_shell,rand_int,rand_hue_min,rand_hue_max,rand_sat_min,rand_sat_max,rand_val_min,rand_val_max,3521,rand_seed);
	if (debugMode == "rand")
		outColor = color(rand_int);

	//rand via position Y
	float py_positions[2] = {py_posi_a,py_posi_b};
	float py_int = data_Ramp(py_positions,lca_face_shell,py_rand_int,plant_py_data,py_seed,rand_seed);
	point py_resout = value_byRange(py_int,py_hue_min,py_hue_max,py_sat_min,py_sat_max,py_val_min,py_val_max);
	if (debugMode == "py")
		outColor = color(py_int);	
	//rand via area
	float area_positions[2] = {area_posi_a,area_posi_b};
	float area_int = data_Ramp(area_positions,lca_face_shell,area_rand_int,plant_area_data,area_seed,rand_seed);
	point area_resout = value_byRange(area_int,area_hue_min,area_hue_max,area_sat_min,area_sat_max,area_val_min,area_val_max);
	if (debugMode == "area")
		outColor = color(area_int);

	//rand via ao
	float ao_positions[2] = {ao_posi_a,ao_posi_b};
	float ao_int = data_Ramp(ao_positions,lca_face_shell,ao_rand_int,plant_ao_data,ao_seed,rand_seed);
	point ao_resout = value_byRange(ao_int,ao_hue_min,ao_hue_max,ao_sat_min,ao_sat_max,ao_val_min,ao_val_max);
	if (debugMode == "ao")
		outColor = color(ao_int);

	//rand via cv
	// float cv_positions[2] = {cv_posi_a,cv_posi_b};
	// float cv_int = data_Ramp(cv_positions,lca_face_shell,cv_rand_int,plant_cv_data,cv_seed,rand_seed);
	// point cv_resout = value_byRange(cv_int,cv_hue_min,cv_hue_max,cv_sat_min,cv_sat_max,cv_val_min,cv_val_max);
	// if (debugMode == "cv")
	// 	outColor = color(cv_int);

	//rand via custom attribute
	float cus_positions[2] = {cus_posi_a,cus_posi_b};
	float cus_int = data_Ramp(cus_positions,lca_face_shell,cus_rand_int,plant_custom_data,cus_seed,rand_seed);
	point cus_resout = value_byRange(cus_int,cus_hue_min,cus_hue_max,cus_sat_min,cus_sat_max,cus_val_min,cus_val_max);
	if (debugMode == "cus")
		outColor = color(cus_int);


	tmp[0] = tmp[0]+rand_resout[0]+py_resout[0]*py_enable+area_resout[0]*area_enable+ao_resout[0]*ao_enable+cus_resout[0]*cus_enable;
	tmp[1] = tmp[1]+rand_resout[1]+py_resout[1]*py_enable+area_resout[1]*area_enable+ao_resout[1]*ao_enable+cus_resout[1]*cus_enable;
	tmp[2] = tmp[2]+rand_resout[2]+py_resout[2]*py_enable+area_resout[2]*area_enable+ao_resout[2]*ao_enable+cus_resout[2]*cus_enable;

	if (debugMode == "render")
		outColor = clamp(al_hsv2rgb(tmp),0,1);

}
