#!/usr/bin/python


import os
from argparse import ArgumentParser
from multiprocessing.dummy import Pool as ThreadPool

def argsChaser():
    parser = ArgumentParser(usage='\t Batch resize EXR file.')
    parser.add_argument("-f", "--fileDir", metavar='DIR/', action='store', default=".", help="folder dir which contents EXR file.")
    parser.add_argument("-o", "--outputDir", metavar='DIR/', action='store', default=".", help="folder dir which output EXR file.")
    parser.add_argument("-t", "--threads", metavar='4|8|12', action='store', default=1, help="Number of threads we used.")    

    args=None
    temp_args,unknow = parser.parse_known_args()
    args=vars(temp_args)
    return args


args = argsChaser()
root = os.path.dirname(os.path.realpath(__file__))

def printf(text):
    print text

def excuted(command):
    os.system(command)

def main():
    # the list contents all EXR files which need be resized
    tasks = [] 
    fileDir = args["fileDir"]
    outputDir = args["outputDir"]
    threads = args["threads"]
    for file in os.listdir(fileDir):
        if not file.endswith(".exr"):
            continue
        excute=os.path.join(root, "bin", "Scanline")
        infile = os.path.join(fileDir,file)
        # if --outputDir is exsit, we would use that value, or a proxy with .proxy 
        # subffix would be used in current fileDir.
        if outputDir is ".":
            if not os.path.isdir(os.path.join(fileDir,"proxy")):
                os.mkdir(os.path.join(fileDir,"proxy"), 0777)
            outfile = os.path.join(fileDir,"proxy",file[:-4] + ".proxy"+ ".exr")
        else:
            outfile = os.path.join(outputDir,file)
        command = "%s %s %s"%(excute, infile, outfile)
        tasks.append(command)

    # make the Pool of workers
    pool = ThreadPool(int(threads)) 

    results = pool.map(excuted, tasks)

if __name__ == "__main__":
    main()

#############################
# Example
# >./runScanline -f /path/to/folder/beauty -t 8